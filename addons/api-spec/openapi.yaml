openapi: 3.0.0
  
info:
  title: PacketFence API
  description: An API to access the PacketFence resources. Lets make the PacketFence API great again!
  version: 0.0.1
    
servers:
  - url: http://localhost:9090/api/v1
    description: Local API server
      
paths:
  /login:
    post:
      summary: Login into the API and obtain a token
      security:
        - none: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
          
  /tenants_onboarding:
    post:
      summary: Allows to onboard a tenant and configure a remote access point using an onboarding token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User friendly name of the tenant
                domain_name:
                  type: string
                  description: A valid domain name that will be used for the tenant portal domain name and as the 802.1x realm
                token:
                  type: string
                  description: The user token that allows to find the proper AP that the tenant is configuring
                ssids:
                  type: array
                  items:
                    type: object
                    properties:
                      security:
                        description: The security type of the SSID. Valid types "WPA2-Personnal", "WPA2-Enterprise", "MAC-Authentication"
                        type: string
                      name:
                        description: The name of the SSID
                        type: string
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Duplicate"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

      
  /tenants/{tenant_id}:
    get:
      summary: Allows to get a tenant by its ID
      responses:
        '200':
          description: Tenant successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"

  /users:
    get:
      summary: Returns a list of users
      description: The list of user will be limited to 100 and a cursor will be returned for iterating on other users. Iteration is only needed if the hasMore key has a true value
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"
    post:
      summary: Creates a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Duplicate"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

  /users/{user_id}:
    get:
      summary: Returns a specific user by its ID
      parameters:
        - name: user_id
          in: path
          required: true
          description: The user ID to fetch
          schema:
            type: string
      responses:
        '200':
          description: A specific user
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: "#/components/schemas/UserWithLinks"
    put:
      summary: Allows to update a whole user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    patch:
      summary: Allows to update parts of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Allows to delete a user
      responses:
        '204':
          description: Deleted user
  
  /users/{user_id}/nodes:
    get:
      summary: Allows to get the nodes of a user
      responses:
        '200':
          description: List of the user's nodes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodesList"
          
  /users/{user_id}/password:
    get:
      summary: Get the password entry for a user
      responses:
        '200':
          description: The password entry for a specific user
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: "#/components/schemas/Password"
    post:
      summary: Create a password entry for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Password"
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Duplicate"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    put:
      summary: Allows to update the whole password entry for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Password"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    patch:
      summary: Allows to update parts of a password entry of a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Password"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Allows to delete a password entry for a user
      responses:
        '204':
          description: Deleted password entry
  
  /config/connection_profiles:
    get:
      summary: Get all the connection profiles
      responses:
        '200':
          description: A list of connection profiles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionProfilesList"
    post:
      summary: Creates a connection profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionProfile"
      responses:
        '201':
          $ref: "#/components/responses/Created"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Duplicate"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
  /config/connection_profiles/{connection_profile_id}:
    get:
      summary: Returns a specific connection profile by its ID
      parameters:
        - name: connection_profile_id
          in: path
          required: true
          description: The connection profile ID to fetch
          schema:
            type: string
      responses:
        '200':
          description: A specific connection profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: "#/components/schemas/ConnectionProfile"
    put:
      summary: Allows to update a whole connection profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionProfile"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    patch:
      summary: Allows to update parts of a connection profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionProfile"
      responses:
        '200':
          $ref: "#/components/responses/Message"    
        '400':
          $ref: "#/components/responses/BadRequest"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Allows to delete a connection profile
      responses:
        '204':
          description: Deleted connection profile


security:
  - bearerAuth: []
   

      
