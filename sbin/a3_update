#!/usr/bin/perl
use strict;
use warnings;

use POSIX ();
use File::Find;

use Readonly;

use lib '/usr/local/pf/lib';
use pf::version;

Readonly::Scalar my $TMP_DIR => $ARGV[0];

unless (-d $TMP_DIR && -o $TMP_DIR) {
  die "No workspace provided for update process";
}

# Paths and Files
Readonly::Scalar my $BIN_DIR              => '/usr/bin';
Readonly::Scalar my $A3_BASE_DIR          => '/usr/local/pf';
Readonly::Scalar my $A3_BIN_DIR           => "$A3_BASE_DIR/bin";
Readonly::Scalar my $A3_CONF_DIR          => "$A3_BASE_DIR/conf";
Readonly::Scalar my $A3_MIGRATION_DIR     => "$A3_BASE_DIR/conf_migration";
Readonly::Scalar my $A3_DB_DIR            => "$A3_BASE_DIR/db";
Readonly::Scalar my $A3_HTML_DIR          => "$A3_BASE_DIR/html";
Readonly::Scalar my $A3_LOG_DIR           => "$A3_BASE_DIR/logs";
Readonly::Scalar my $A3_SBIN_DIR          => "$A3_BASE_DIR/sbin";
Readonly::Scalar my $A3_UPDATE_PATH_FILE  => "$A3_DB_DIR/a3-update-path";
Readonly::Scalar my $A3_UPDATE_LOG_FILE   => "$A3_LOG_DIR/a3_update.log";
Readonly::Scalar my $A3_PROGRESS_LOG_FILE => "$A3_HTML_DIR/update/a3_update.progress";
Readonly::Scalar my $A3_DBINFO_FILE       => "$A3_CONF_DIR/dbinfo.A3";
Readonly::Scalar my $A3_UPDATE_DB_DUMP    => "$TMP_DIR/A3_db.sql";
Readonly::Scalar my $A3_UPDATE_APP_DUMP   => "$TMP_DIR/A3_app.tar.gz";

# Binaries
Readonly::Scalar my $AWK_BIN              => "$BIN_DIR/awk";
Readonly::Scalar my $CAT_BIN              => "$BIN_DIR/cat";
Readonly::Scalar my $CP_BIN               => "$BIN_DIR/cp";
Readonly::Scalar my $CURL_BIN             => "$BIN_DIR/curl";
Readonly::Scalar my $GREP_BIN             => "$BIN_DIR/grep";
Readonly::Scalar my $HEAD_BIN             => "$BIN_DIR/head";
Readonly::Scalar my $MYSQL_BIN            => "$BIN_DIR/mysql";
Readonly::Scalar my $MYSQLDUMP_BIN        => "$BIN_DIR/mysqldump";
Readonly::Scalar my $PFCMD_BIN            => "$A3_BIN_DIR/pfcmd";
Readonly::Scalar my $PING_BIN             => "$BIN_DIR/ping";
Readonly::Scalar my $RM_BIN               => "$BIN_DIR/rm";
Readonly::Scalar my $RPM_BIN              => "$BIN_DIR/rpm";
Readonly::Scalar my $SED_BIN              => "$BIN_DIR/sed";
Readonly::Scalar my $SORT_BIN             => "$BIN_DIR/sort";
Readonly::Scalar my $SYSTEMCTL_BIN        => "$BIN_DIR/systemctl";
Readonly::Scalar my $TAR_BIN              => "$BIN_DIR/tar";
Readonly::Scalar my $TEE_BIN              => "$BIN_DIR/tee";
Readonly::Scalar my $UNIQ_BIN             => "$BIN_DIR/uniq";
Readonly::Scalar my $YUM_BIN              => "$BIN_DIR/yum";

# Environment
Readonly::Scalar my $CURRENT_VERSION      => pf::version::version_get_current();
Readonly::Scalar my $CENTOS_BASE          => 'mirrorlist.centos.org';

# Init logfiles
open(UPDATE_LOG,   '>>', $A3_UPDATE_LOG_FILE)   || die "Unable to open update log file";
open(PROGRESS_LOG, '>',  $A3_PROGRESS_LOG_FILE) || die "Unable to open progress log file";

my $debug = 0;
my $a3_pkg = 'A3';
my $a3_db = 'A3';
my $db_passwd;
my @a3_and_dep_pkg = qw(A3 A3-config A3-pfcmd-suid);
my $to_version;
my @update_path_list;
my @db_schema_files;
my @conf_migration_files;

sub get_db_password {
  my $password;

  open DBINFO, "<", $A3_DBINFO_FILE || die "Unable to find the database information file";

  while (<DBINFO>) {
    if ($_ =~ /^dbroot_pass=(.*)$/) {
      $password = $1;
      last;
    }
  }

  close DBINFO;

  return $password;
}

sub A3_Die {
  my $msg = shift;
  commit_update_log($msg);
  commit_progress_log("Update was unsuccessful.");
  die "$msg\n";
}

sub A3_Warn {
  my $msg = shift;
  print "$msg";
  commit_update_log($msg);
  warn "$msg\n";
}

sub commit_update_log {
  my $msg = shift @_;
  my $current_time = POSIX::strftime("%Y-%m-%d %H:%M:%S",localtime);
  print UPDATE_LOG "[ $current_time ] $msg\n";
}

sub commit_progress_log {
  my $msg = shift @_;
  print PROGRESS_LOG "$msg\n";
}

sub commit_progress_log_action_start {
  my $msg = shift @_;
  print PROGRESS_LOG "$msg... ";
}

sub exit_success {
  commit_progress_log("Update completed successfully.");
  exit 0;
}

sub exit_failure {
  my ($code) = @_;
  commit_progress_log("Update was unsuccessful.");
  exit $code // 1;
}

sub call_system {
  my $cmd = shift;

  commit_update_log("call_system invoked with \"$cmd\"");

  my $ret       = system($cmd);
  my $exit_code = $ret >> 8;

  commit_update_log("system() returned $ret, exit code is $exit_code");

  return $exit_code;
}

sub dump_db {
  commit_update_log("Starting database backup");
  commit_progress_log_action_start("Backing up database");

  $db_passwd = get_db_password();
  unless ($db_passwd) {
    commit_update_log("Unable to access database: $!");
    commit_progress_log("error");
    die "Database backup failed!\n";
  }

  if ($debug) {
    print "We have password $db_passwd\n";
  }

  if (call_system("$MYSQLDUMP_BIN --opt -u root -p$db_passwd $a3_db > $A3_UPDATE_DB_DUMP") != 0) {
    commit_update_log("Unable to back up database: $!");
    commit_progress_log("error");
    die "Database backup failed!\n";
  }

  commit_progress_log("done!");
  commit_update_log("Database backup completed");
}

sub dump_app {
  commit_progress_log_action_start("Backing up application data");

  if (call_system("$TAR_BIN -C /usr/local -czf $A3_UPDATE_APP_DUMP pf --exclude='pf/logs' --exclude='pf/var'") != 0) {
    commit_update_log("Unable to back up application data: $!");
    commit_progress_log("error");
    die "Application data backup failed!\n";
  }

  commit_progress_log("done!");
  commit_update_log("Application data backup completed");
}

sub stop_services {
  # stop packetfence-config will conflict with some %post step in spec scriptlet -- updatesystemd
  my @service_stop_cmd = ("$PFCMD_BIN service pf stop");

  # We need to make sure config service is running, otherwise pfcmd will not able to do the stop job
  if (call_system("$SYSTEMCTL_BIN status packetfence-config | $GREP_BIN Active | $GREP_BIN running") != 0) {
    commit_update_log("A3 configuration service is not running");
    die "A3 configuration service is not running\n";
  }

  commit_update_log("Starting A3 service shutdown");
  commit_progress_log_action_start("Stopping A3 services");

  foreach (@service_stop_cmd) {
    if (call_system($_) != 0) {
      commit_update_log("Unable to stop service $_");
      warn "Unable to stop A3 services\n";
    }
  }

  commit_progress_log("done!");
  commit_update_log("A3 service shutdown complete");
}

sub check_up_to_date {
  call_system("$YUM_BIN clean all >/dev/null; $YUM_BIN makecache fast >/dev/null");
  open CMD, '-|', "$YUM_BIN list $a3_pkg" or die $!;
  local $/ = undef;
  my $line = <CMD>;

  return $line !~ /Available/m;
}

sub check_yum_connectivity {
  commit_progress_log_action_start("Checking connectivity to update servers");

  if (call_system("$PING_BIN -c 3 $CENTOS_BASE >/dev/null 2>&1") != 0){
    commit_progress_log("error");
    A3_Die("Unable to connect to CentOS base yum repository!");
  }

  my @repo_hosts = `$YUM_BIN repolist -v                               \\
                  | $GREP_BIN -E Repo-baseurl.*aerohive                \\
                  | $AWK_BIN -F' : ' '{print \$2}'                     \\
                  | $SED_BIN -r 's/^(https?:\\/\\/[^/]+)\\/.*\$/\\1/g' \\
                  | $SORT_BIN                                          \\
                  | $UNIQ_BIN`;

  commit_update_log("Found update servers: " . join(',', @repo_hosts));

  foreach my $host (@repo_hosts) {
    chomp $host;
    commit_update_log("Checking connectivity to $host");

    my $status = `$CURL_BIN -s -I -m 60 -w %{http_code} -o /dev/null $host`;

    if ($status < 200 || $status >= 400) {
      commit_progress_log("error");
      commit_update_log("Unable to connect to update server $host");

      print "Connect to Aerohive A3 yum repository at $host failed!\n";

      exit_failure(1);
    }
  }

  commit_progress_log("done!");
}

sub get_to_version {
  my $ava_version;
  open CMD, '-|', "$YUM_BIN list $a3_pkg available" or die $@;
  while (<CMD>) {
    if($_ =~ /Available Packages/) {
      next;
    }
    #this will be 1.1.1-0.20180611.el7 string value
    $ava_version = (split /(\s)+/, $_)[2];
  }
  $to_version = (split /-/, $ava_version)[0];
  commit_update_log("A3 current version is $CURRENT_VERSION and target update version is $to_version");
}

sub execute_app_update {
  my @all_pkgs;
  my $cmd = "$YUM_BIN update ";
  open CMD, '-|',  "$YUM_BIN list $a3_pkg*    \\
                  | $SED_BIN '1,/Available/d' \\
                  | $AWK_BIN '{print \$1}'    \\
                  | $TEE_BIN -a $A3_UPDATE_LOG_FILE" or die $@;
  while (<CMD>) {
    chomp($_);
    push @all_pkgs, $_;
  }
  foreach (@all_pkgs) {
       $cmd .= $_ . " ";
  }
  print "The cmd is $cmd";
  $cmd .= " -y";
  commit_update_log("Update pkg cmd is $cmd");
  commit_progress_log_action_start("Updating A3 packages");

  if (call_system("$cmd >> $A3_UPDATE_LOG_FILE 2>&1") != 0) {
    A3_Warn("Unable to update A3 packages, attempting to rollback changes");
    commit_progress_log("error");
    roll_back("app");
  }
  else {
    commit_progress_log("done!");
  }
}

sub generate_update_patch_list {
 open my $fh, '<', "$A3_UPDATE_PATH_FILE" or die "Unable to locate update path file, $!";
  my $count = 0;
  # get the update list from update path file (From to To only)
  while (<$fh>) {
    chomp $_;
    if ($CURRENT_VERSION eq $_) {
      $count++;
      push @update_path_list, $_;
      next;
    }elsif ($to_version eq $_) {
      push @update_path_list, $_;
      last;
    }

    if ($count == 0) {
      next;
    } else {
      push @update_path_list, $_;
    }
  }
  print 'The update path list is ' . join(',',@update_path_list);
  commit_update_log('The update path is ' . join(',',@update_path_list));
}

sub check_db_schema_file {
  for (0..$#update_path_list-1) {
    push @db_schema_files, "a3-upgrade-".$update_path_list[$_]."-".$update_path_list[$_+1].".sql";
  }
  commit_update_log('The database schema files that need to be applied are ' . join(',',@db_schema_files));
  foreach (@db_schema_files) {
    if (! -e $A3_DB_DIR."/".$_) {
      A3_Die("The database schema migration script for $_ does not exist, fatal!!");
    }
  }
}

sub check_conf_migration_file {
  for (0..$#update_path_list-1) {
    push @conf_migration_files, "conf_migration-".$update_path_list[$_]."-".$update_path_list[$_+1];
  }
  commit_update_log('The configuration migration files that need to be applied are ' . join(',',@conf_migration_files));
  foreach (@conf_migration_files) {
    if (! -e $A3_MIGRATION_DIR."/".$_) {
      A3_Die("The configuration migration script for $_ does not exist, fatal!!");
    }
  }
}

sub unpack_app_back {
  if (call_system("$TAR_BIN xfz $A3_UPDATE_APP_DUMP -C $TMP_DIR") != 0) {
    A3_Die("Unable to unpack the application data backup file!");
  }
}

sub restore_conf_file {
  my $app_dump_copy = $A3_UPDATE_APP_DUMP;
  #remove suffix
  $app_dump_copy =~ s/\..*$//;
  commit_update_log("Restoring configuration files");
  call_system("$RM_BIN -rf $A3_CONF_DIR/*; $CP_BIN -rf $TMP_DIR/pf/conf/* $A3_CONF_DIR");
}

sub roll_back_db {
  if (! -e $A3_UPDATE_DB_DUMP) {
    A3_Die("Database backup file does not exist, unable to restore!!");
  }
  if (call_system "$MYSQL_BIN -u root -p$db_passwd $a3_db < $A3_UPDATE_DB_DUMP" != 0) {
    A3_Die("Database restore has failed, please investigate!!");
  }
}

sub roll_back_app {
  unpack_app_back();
  my $rpm_version = `$RPM_BIN -qa $a3_pkg | $AWK_BIN -F- '{print \$2}'`;
  chomp $rpm_version;
  #There are possible 3 situations after failure of yum update A3
  #1)old rpm is removed, and new rpm is not installed
  #2)old rpm is partially removed, and new rpm is not installed(probabyl we will not get there per rpm update mechanism)
  #3)new rpm is partially installed
  commit_update_log("RPM version is $rpm_version and current version is $CURRENT_VERSION");
  if (! $rpm_version) {
    if (call_system("$YUM_BIN install $a3_pkg."-".$CURRENT_VERSION -y | $TEE_BIN -a $A3_UPDATE_LOG_FILE}") != 0) {
      A3_Die("Failed to roll back application, really Die!!");
    }
    #restore conf
    restore_conf_file();
  }
  elsif ($rpm_version eq $CURRENT_VERSION) {
    commit_update_log("To be done more");
    restore_conf_file();
  }
  elsif ($rpm_version eq $to_version) {
    my $history_id = `$YUM_BIN history 2>/dev/null   \\
                    | $GREP_BIN -E '[[:digit:]]{4}-' \\
                    | $AWK_BIN -F'|' '{print \$1}'   \\
                    | $HEAD_BIN -1`;
    commit_update_log("Start rolling back last update");
    call_system("$YUM_BIN history undo $history_id -y | $TEE_BIN -a $A3_UPDATE_LOG_FILE");
    commit_update_log("Finished rolling back last update");
    restore_conf_file();
  }
}

sub roll_back {
  my $stage = shift;
  if ($stage eq "db") {
    roll_back_db();
  }
  elsif ($stage eq "app") {
    roll_back_app();
  }
  elsif ($stage eq "all") {
    roll_back_db();
    roll_back_app();
  }
  #start pf service
  my @service_start_cmd = ("$SYSTEMCTL_BIN start packetfence-config",
                           "$PFCMD_BIN service pf start");
  commit_update_log("Starting A3 services");
  foreach (@service_start_cmd) {
    system($_);
  }
  #special return code for rollback
  exit_failure(99);
}

sub apply_db_update_schema {
  my $passwd = get_db_password();
  commit_progress_log_action_start("Applying database schema updates");
  foreach my $db_file (@db_schema_files) {
    my $ret = `$MYSQL_BIN -u root -p$passwd $a3_db < $A3_DB_DIR/$db_file 2>&1`;
    if ($ret =~ /ERROR/i) {
      A3_Warn("Unable to apply database schema update $db_file: failed with error message \"$ret\"!");
      roll_back("db");
    }
  }
  commit_update_log("Finished applying database schema updates!");
  commit_progress_log("done!");
}

sub apply_conf_migration {
  commit_progress_log_action_start("Applying configuration migration scripts");

  foreach (@conf_migration_files) {
    call_system("$A3_MIGRATION_DIR/$_");
  }

  commit_progress_log("done!");
}

sub set_up {
  # clean yum cache
  call_system("$YUM_BIN clean all");
}

sub find_rpmnew {
  my @rpmnew_list;
  find sub { if ($File::Find::name =~ /\.rpmnew/) { push @rpmnew_list, $File::Find::name; } }, ($A3_BASE_DIR);
  commit_update_log('The list of rpmnew files is ' . join(',',@rpmnew_list) . '; These files may need to be merged manually if necessary!');
}

sub post_update {
  my @post_cmd_list = ("$PFCMD_BIN fixpermissions",
                       "$PFCMD_BIN pfconfig clear_backend",
                       "$SYSTEMCTL_BIN restart packetfence-config",
                       "$PFCMD_BIN service pf restart",
                       "$CAT_BIN $A3_CONF_DIR/pf-release > $A3_CONF_DIR/currently-at");

  commit_progress_log_action_start("Starting post-update processing");

  foreach my $cmd (@post_cmd_list) {
    if (call_system("$cmd >> $A3_UPDATE_LOG_FILE 2>&1") != 0) {
      commit_progress_log("error");
      A3_Die("Post-update processing failed, please investigate!");
    }
  }

  commit_progress_log("done!");
}


set_up();
check_yum_connectivity();

if (check_up_to_date()) {
  commit_update_log("A3 services already up to date");
  print "A3 services already up to date\n";
  exit_success();
}

get_to_version();
dump_db();
dump_app();
stop_services();
execute_app_update();
generate_update_patch_list();
check_db_schema_file();
check_conf_migration_file();
apply_db_update_schema();
apply_conf_migration();
find_rpmnew();
post_update();

exit_success();
